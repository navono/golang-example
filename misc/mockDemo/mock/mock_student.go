// Code generated by MockGen. DO NOT EDIT.
// Source: student.go

// Package mock_mockDemo is a generated GoMock package.
package mock_mockDemo

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIPeople is a mock of IPeople interface
type MockIPeople struct {
	ctrl     *gomock.Controller
	recorder *MockIPeopleMockRecorder
}

// MockIPeopleMockRecorder is the mock recorder for MockIPeople
type MockIPeopleMockRecorder struct {
	mock *MockIPeople
}

// NewMockIPeople creates a new mock instance
func NewMockIPeople(ctrl *gomock.Controller) *MockIPeople {
	mock := &MockIPeople{ctrl: ctrl}
	mock.recorder = &MockIPeopleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPeople) EXPECT() *MockIPeopleMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockIPeople) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockIPeopleMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIPeople)(nil).GetName))
}

// SetName mocks base method
func (m *MockIPeople) SetName(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetName", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// SetName indicates an expected call of SetName
func (mr *MockIPeopleMockRecorder) SetName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockIPeople)(nil).SetName), arg0)
}
